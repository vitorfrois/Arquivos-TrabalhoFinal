<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="utils_8h" kind="file" language="C++">
    <compoundname>utils.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">ctype.h</includes>
    <includes refid="myString_8h" local="yes">../includes/myString.h</includes>
    <includedby refid="csv_8h" local="yes">includes/csv.h</includedby>
    <includedby refid="index__t1_8h" local="yes">includes/index_t1.h</includedby>
    <includedby refid="index__t2_8h" local="yes">includes/index_t2.h</includedby>
    <includedby refid="main_8c" local="yes">main.c</includedby>
    <incdepgraph>
      <node id="6">
        <label>../includes/myString.h</label>
        <link refid="myString_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>includes/utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ctype.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>includes/csv.h</label>
        <link refid="csv_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>includes/file_t1.h</label>
        <link refid="file__t1_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>includes/file_t2.h</label>
        <link refid="file__t2_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>includes/index_t1.h</label>
        <link refid="index__t1_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>includes/index_t2.h</label>
        <link refid="index__t2_8h"/>
      </node>
      <node id="1">
        <label>includes/utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>main.c</label>
        <link refid="main_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structregistry__data__s" prot="public">registry_data_s</innerclass>
    <innerclass refid="structWField" prot="public">WField</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="utils_8h_1a200d9515a6ace6fe114bca5b0151e424" prot="public" static="no">
        <name>ARR_SIZE</name>
        <param><defname>x</defname></param>
        <initializer>(sizeof(x) / sizeof((x)[0]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="14" column="9" bodyfile="includes/utils.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="utils_8h_1ab4ecff344365ca5209e369260d4e6f85" prot="public" static="no">
        <type>struct <ref refid="structregistry__data__s" kindref="compound">registry_data_s</ref></type>
        <definition>typedef struct registry_data_s registry_data_st</definition>
        <argsstring></argsstring>
        <name>registry_data_st</name>
        <briefdescription>
<para>Struct that stores registry data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="27" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="utils_8h_1a73cb953389e5a1a14c2c726796f047c3" prot="public" static="no">
        <type>struct <ref refid="structWField" kindref="compound">WField</ref></type>
        <definition>typedef struct WField Field</definition>
        <argsstring></argsstring>
        <name>Field</name>
        <briefdescription>
<para>Struct that stores searching data. </para>
        </briefdescription>
        <detaileddescription>
<para>The fields of this struct are strings. Name stores name of the field and Value its value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="38" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="utils_8h_1a4fa9469637b72e4df1b1906bd3ab7900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare_registry</definition>
        <argsstring>(registry_data_st registry, Field *f, int n)</argsstring>
        <name>compare_registry</name>
        <param>
          <type><ref refid="utils_8h_1ab4ecff344365ca5209e369260d4e6f85" kindref="member">registry_data_st</ref></type>
          <declname>registry</declname>
        </param>
        <param>
          <type><ref refid="utils_8h_1a73cb953389e5a1a14c2c726796f047c3" kindref="member">Field</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Check if the fields of struct f exists in struct registry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>registry</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct that stores registry data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of searching values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of array f </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 1 if all fields exists, 0 else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="48" column="5" declfile="includes/utils.h" declline="48" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a31eceacbf297b0770d7f7e6c78fa01c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_registry</definition>
        <argsstring>(registry_data_st registry)</argsstring>
        <name>print_registry</name>
        <param>
          <type><ref refid="utils_8h_1ab4ecff344365ca5209e369260d4e6f85" kindref="member">registry_data_st</ref></type>
          <declname>registry</declname>
        </param>
        <briefdescription>
<para>Prints a registry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>registry</parametername>
</parameternamelist>
<parameterdescription>
<para>Registry to be printed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="55" column="6" declfile="includes/utils.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a2abc41ffb562ba4589c6fb76c196d112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE * open_file_rb</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>open_file_rb</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Open a binary file in &quot;rb&quot; mode This functino prints a error message when the file is not properly opened. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>File to be opened </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FILE* Pointer to the file </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="64" column="6" declfile="includes/utils.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a38a4a8da251090bacfb4e6ac0e76e8a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE * open_file_rplusb</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>open_file_rplusb</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Open a binary file in &quot;r+b&quot; mode This functino prints a error message when the file is not properly opened. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>File to be opened </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FILE* Pointer to the file </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="73" column="6" declfile="includes/utils.h" declline="73" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1ab7d0a4ef24ad2e0a21f90ebaca7db1e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE * open_file_wb</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>open_file_wb</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Open a binary file in &quot;wb&quot; mode This functino prints a error message when the file is not properly opened. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>File to be opened </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FILE* Pointer to the file </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="82" column="6" declfile="includes/utils.h" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a28ea9327fb09aba4511e6f8b1059e831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void readline</definition>
        <argsstring>(char *string)</argsstring>
        <name>readline</name>
        <param>
          <type>char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="84" column="6" declfile="includes/utils.h" declline="84" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a466f516fc6e25d3965a9ac4166bf1600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void binarioNaTela</definition>
        <argsstring>(const char *nomeArquivoBinario)</argsstring>
        <name>binarioNaTela</name>
        <param>
          <type>const char *</type>
          <declname>nomeArquivoBinario</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="85" column="6" declfile="includes/utils.h" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a879dcd689a2275db5af8be1daa86a793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * scan_quote_string</definition>
        <argsstring>()</argsstring>
        <name>scan_quote_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="86" column="6" declfile="includes/utils.h" declline="86" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1abfa4570669ae5278b2a05e1fde038765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int check_status</definition>
        <argsstring>(FILE *)</argsstring>
        <name>check_status</name>
        <param>
          <type>FILE *</type>
        </param>
        <briefdescription>
<para>Check file status. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>If the file is corrupted, returns 0. Else, 1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="93" column="5" declfile="includes/utils.h" declline="93" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a58f1de90af757d1a3b4f1a93293f26fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logical_deletion</definition>
        <argsstring>(FILE *, int)</argsstring>
        <name>logical_deletion</name>
        <param>
          <type>FILE *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Logically deletes a registry The pointer should be at the beggining of the registry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>FILE*</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary file with the registry to be deleted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the registry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="102" column="6" declfile="includes/utils.h" declline="102" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1ad60fe7b28861a7ce7b4bdb21b8e73879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int search_field_id</definition>
        <argsstring>(Field *f, int n)</argsstring>
        <name>search_field_id</name>
        <param>
          <type><ref refid="utils_8h_1a73cb953389e5a1a14c2c726796f047c3" kindref="member">Field</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Search for &quot;id&quot; in &quot;Name&quot; field at struct array &quot;f&quot; Procura se existe um campo de Name == id no array de structs &quot;f&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of &quot;f&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Returns index of found field. If the &quot;id&quot; field does not exists, returns -1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="112" column="5" declfile="includes/utils.h" declline="112" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1ad36272995c937f42daaeb86a211f40f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utils_8h_1a73cb953389e5a1a14c2c726796f047c3" kindref="member">Field</ref> *</type>
        <definition>Field * get_field</definition>
        <argsstring>(int x)</argsstring>
        <name>get_field</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Read a array of Field from stdin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Field* Array of Field </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="120" column="7" declfile="includes/utils.h" declline="120" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a1caeeec0e1dc9a4b36c52644ebfe5e2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_field</definition>
        <argsstring>(Field *f, int x)</argsstring>
        <name>free_field</name>
        <param>
          <type><ref refid="utils_8h_1a73cb953389e5a1a14c2c726796f047c3" kindref="member">Field</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Free an array of Field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of Field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="128" column="6" declfile="includes/utils.h" declline="128" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1af5a4e9b75038c48a41b1f66290afae2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utils_8h_1ab4ecff344365ca5209e369260d4e6f85" kindref="member">registry_data_st</ref></type>
        <definition>registry_data_st read_registry_line</definition>
        <argsstring>()</argsstring>
        <name>read_registry_line</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/utils.h" line="130" column="18" declfile="includes/utils.h" declline="130" declcolumn="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Common functions across files in project. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__UTILS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__UTILS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../includes/myString.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARR_SIZE(x)<sp/><sp/>(sizeof(x)<sp/>/<sp/>sizeof((x)[0]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="structregistry__data__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structregistry__data__s" kindref="compound">registry_data_s</ref>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>year;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>city[50];</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amount;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>initials[5];</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>brand[50];</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>model[50];</highlight></codeline>
<codeline lineno="27" refid="utils_8h_1ab4ecff344365ca5209e369260d4e6f85" refkind="member"><highlight class="normal">}<ref refid="utils_8h_1ab4ecff344365ca5209e369260d4e6f85" kindref="member">registry_data_st</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="structWField" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structWField" kindref="compound">WField</ref>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value;</highlight></codeline>
<codeline lineno="38" refid="utils_8h_1a73cb953389e5a1a14c2c726796f047c3" refkind="member"><highlight class="normal">}<ref refid="utils_8h_1a73cb953389e5a1a14c2c726796f047c3" kindref="member">Field</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="utils_8h_1a4fa9469637b72e4df1b1906bd3ab7900" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utils_8h_1a4fa9469637b72e4df1b1906bd3ab7900" kindref="member">compare_registry</ref>(<ref refid="structregistry__data__s" kindref="compound">registry_data_st</ref><sp/>registry,<sp/><ref refid="structWField" kindref="compound">Field</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="utils_8h_1a31eceacbf297b0770d7f7e6c78fa01c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="utils_8h_1a31eceacbf297b0770d7f7e6c78fa01c8" kindref="member">print_registry</ref>(<ref refid="structregistry__data__s" kindref="compound">registry_data_st</ref><sp/>registry);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="utils_8h_1a2abc41ffb562ba4589c6fb76c196d112" refkind="member"><highlight class="normal">FILE<sp/>*<ref refid="utils_8h_1a2abc41ffb562ba4589c6fb76c196d112" kindref="member">open_file_rb</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="utils_8h_1a38a4a8da251090bacfb4e6ac0e76e8a5" refkind="member"><highlight class="normal">FILE<sp/>*<ref refid="utils_8h_1a38a4a8da251090bacfb4e6ac0e76e8a5" kindref="member">open_file_rplusb</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="utils_8h_1ab7d0a4ef24ad2e0a21f90ebaca7db1e6" refkind="member"><highlight class="normal">FILE<sp/>*<ref refid="utils_8h_1ab7d0a4ef24ad2e0a21f90ebaca7db1e6" kindref="member">open_file_wb</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>readline(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>binarioNaTela(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nomeArquivoBinario);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*scan_quote_string();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="utils_8h_1abfa4570669ae5278b2a05e1fde038765" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utils_8h_1abfa4570669ae5278b2a05e1fde038765" kindref="member">check_status</ref>(FILE*);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="utils_8h_1a58f1de90af757d1a3b4f1a93293f26fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="utils_8h_1a58f1de90af757d1a3b4f1a93293f26fd" kindref="member">logical_deletion</ref>(FILE*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="utils_8h_1ad60fe7b28861a7ce7b4bdb21b8e73879" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utils_8h_1ad60fe7b28861a7ce7b4bdb21b8e73879" kindref="member">search_field_id</ref>(<ref refid="structWField" kindref="compound">Field</ref>*<sp/>f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="utils_8h_1ad36272995c937f42daaeb86a211f40f7" refkind="member"><highlight class="normal"><ref refid="structWField" kindref="compound">Field</ref><sp/>*<ref refid="utils_8h_1ad36272995c937f42daaeb86a211f40f7" kindref="member">get_field</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="utils_8h_1a1caeeec0e1dc9a4b36c52644ebfe5e2b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="utils_8h_1a1caeeec0e1dc9a4b36c52644ebfe5e2b" kindref="member">free_field</ref>(<ref refid="structWField" kindref="compound">Field</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><ref refid="structregistry__data__s" kindref="compound">registry_data_st</ref><sp/>read_registry_line();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="includes/utils.h"/>
  </compounddef>
</doxygen>
